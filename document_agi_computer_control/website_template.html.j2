{% extends "search_template.html.j2" %}
{%block title%}
<title>Search Code By Comment</title>
{%endblock%}
{%block searchscript%}
<script type="text/javascript" defer>
    // Sample data for demonstration
    const data = {
{% for id, data in datadict.items() %}
    {{ id }}: {{ data }},
    {% endfor %}
        };

    const file_mapping = {
{% for k, v in file_mapping.items() %}
    {{ k }}: {{ v }},
    {% endfor %}
        };


    // Create a new FlexSearch instance with the required configuration
    const doc = new FlexSearch.Document({
        tokenize: "full",
        document: {
            id: "id",
            index: ["content"]
        }
    });

    // Add the data to the search index
    Object.keys(data).forEach(id => {
        doc.add(id, data[id]);
    });

    // Event listener for the search input
    function registerSearchEventListener() {
        document.getElementById('searchInput').addEventListener('input', function () {
            const searchTerm = this.value;
            const results = doc.search(searchTerm, 5); // Limiting to 5 results for demonstration
            const detail_types = ["code", "comment"];

            // Display the search results
            const searchResults = document.getElementById('searchResults');
            searchResults.innerHTML = '';
            var searchResultItems = {};
            var searchResultItemIds = [];
            results.forEach(result => {
                const field = result.field; // "content"
                const ids = result.result;
                ids.forEach(id => {
                    const data_type = data[id].type;
                    const file_id = data[id].file_id;
                    if (searchResultItems[file_id] === undefined) {
                        searchResultItemIds.push(file_id);
                        const file_metadata = file_mapping[file_id];
                        const entry_id = file_metadata.entry_id;
                        const summary = data[entry_id + 1].content;
                        const filepath = file_metadata.filepath;
                        const language_id = file_mapping.language_id;
                        searchResultItems[file_id] = {"header": {"summary":summary, "filepath": filepath}, "pairs":{}, "language_id": language_id};
                    }
                    if (detail_types.indexOf(data_type) != -1){
                        const pair_id = ((data_type === "code")?id : (id-1));
                        if (searchResultItems[file_id].pairs[pair_id] === undefined){
                            searchResultItems[file_id].pairs[pair_id] = {"left":data[pair_id].content , "right":data[pair_id-1].content, "location":data[pair_id].location};
                        }
                    }

                    // listItem.textContent = `[${field}][${data_type}] ${data[id][field]}`;
                    // searchResults.appendChild(listItem);
                });
            });
            for (var file_id of searchResultItemIds) {
                const it = searchResultItems[file_id];
                const item = document.createElement('div');
                item.className = "searchItem"; 
                const search_header = document.createElement('div');
                search_header.className = "searchItemInfo";
                const location_p = document.createElement('p');
                location_p.className = "monospace-text";
                location_p.textContent = it.header.filepath;
                search_header.appendChild(location_p);

                var skip_summary = false;

                if (Object.keys(it.pairs).length == 1){
                    if (it.pairs[Object.keys(it.pairs)[0]].right == it.header.summary){
                        skip_summary = true;
                    }
                }
                if (!skip_summary) {
                    const summary_p = document.createElement('p');
                    summary_p.textContent = it.header.summary;
                    search_header.appendChild(summary_p);
                }

                item.appendChild(search_header);
                for (var pair_id in it.pairs){

                    const pair_container = document.createElement('div');
                    pair_container.className = "search-container";
                    const pair = it.pairs[pair_id];
                    const pair_item = document.createElement('div');
                    const pair_left = document.createElement('div');
                    pair_left.className = "left-half";
                    const code_location_p = document.createElement('p');
                    code_location_p.className = "monospace-text";
                    code_location_p.textContent = pair.location;
                    pair_left.appendChild(code_location_p);
                    const comment_p = document.createElement('p');
                    comment_p.textContent = pair.right;
                    pair_left.appendChild(comment_p);
                    
                    const pair_right = document.createElement('div');
                    pair_right.className = "right-half";
                    const code_pre = document.createElement('pre');
                    code_pre.className = "monospace-text";
                    code_pre.textContent = pair.left;
                    pair_right.appendChild(code_pre);

                    pair_container.append(pair_left);
                    pair_container.append(pair_right);
                    item.appendChild(pair_container);
                }
                searchResults.appendChild(item);
            }

        });
    }
    document.addEventListener('DOMContentLoaded', registerSearchEventListener);
</script>
{%endblock%}
{%block stylesheet%}
<style>
    /* Styles for mobile devices */
    @media (max-width: 767px) {
        .repository-url{
            display:none;
        }
        .search-container {
            border: 2px solid #ccc;
        }

        .left-half,
        .right-half {
            padding: 10px;
        }
        #searchResults{
        font-size: 10px;}
    }

    /* Styles for desktop devices */
    @media (min-width: 768px) {

        #searchResults{
        font-size: 7px;}
        .search-container {
            display: flex;
            border: 2px solid #ccc;
        }

        .left-half,
        .right-half {
            flex: 1;
            padding: 10px;

        }
    }

    .left-half {
        background-color: #f1f1f1;
    }

    .right-half {
        background-color: #ccc;
    }

    .monospace-text {
        font-family: "Courier New", monospace;
        color: #333;
    }

    .searchItem {
        padding: 10px;
        border: 2px solid #ccc;
    }

    .searchItemInfo {
        padding: 10px;
    }
</style>
<style type="text/css">
    body {
        font-family: 'Roboto', sans-serif;
    }

    .container {
        display: flex;
        flex-direction: column;
        align-items: left;
        justify-content: center;
        text-align: left;
        margin: 3%;
    }

    input[type="text"] {
        padding: 10px;
        /*border-radius: 10px;*/
        border: 2px solid #ccc;
    }

    ul {
        list-style: none;
        padding: 0;
        margin: 0;
        margin-top: 5px;
    }

    ul li {
        background-color: #f2f2f2;
        padding: 10px;
        margin: 5px;
        /*border-radius: 10px;*/
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        text-align: left;
    }
</style>
{%endblock%}
{%block body%}

<body>
    <div class="container">
        <h2><a href="{{repository_url}}" class="github-icon"><i class="fab fa-github"></i></a> Document Index<span class="repository-url"> of:
            {{partial_repository_url}} </span></h2>
        <input type="text" id="searchInput" placeholder="Search...">
        <ul id="searchResults"></ul>
    </div>
</body>
{%endblock%}