{% extends "search_template.html.j2" %}
{%block title%}
<title>Search Code By Comment</title>
{%endblock%}
{%block searchscript%}
<script src="https://cdn.jsdelivr.net/npm/mark.js"></script>
<script type="text/javascript" defer>

    function navigateToPage(base_filepath, language_id, detail_filepath = "") {
      // Use a relative path to navigate to a specific page
      let page_param = "codeview.html";
      let file_param = 'src'+base_filepath;
      file_param = encodeURIComponent(file_param);
      let language_param = language_id
      let jump_link = `${page_param}?file=${file_param}&language=${language_id}`;
      if (detail_filepath !== ""){
        let location_range =  detail_filepath.slice(base_filepath.length+1);
        let location_param = `mycode.${location_range}`;
        jump_link = `${jump_link}#${location_param}`;
      }
      window.location.href = jump_link;
    }
    // Sample data for demonstration
    const data = {
{% for id, data in datadict.items() %}
    {{ id }}: {{ data }},
    {% endfor %}
        };

    const file_mapping = {
{% for k, v in file_mapping.items() %}
    {{ k }}: {{ v }},
    {% endfor %}
        };


    // Create a new FlexSearch instance with the required configuration
    const doc = new FlexSearch.Document({
        tokenize: "full",
        document: {
            id: "id",
            index: ["content"]
        }
    });

    // Add the data to the search index
    Object.keys(data).forEach(id => {
        doc.add(id, data[id]);
    });

    // Event listener for the search input
    function registerSearchEventListener() {
        document.getElementById('searchInput').addEventListener('input', function () {
            const englishSymbols = ["!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~"];
            function capitalizeFirstLetter(text) {
                return text.charAt(0).toUpperCase() + text.slice(1);
            }
            function mutateText(text){
                var lowerText =  text.toLowerCase()
                var upperText = text.toUpperCase()
                var lowerCapitalized = capitalizeFirstLetter(lowerText)
                return [text ,lowerText ,upperText ,lowerCapitalized]
            }

            function getSubTerms(it)
            {   var new_it = it;
                for (const sym of englishSymbols){
                    new_it = new_it.replaceAll(sym, " ")
                }
                return new_it.split(" ");
            }
            const searchTerm = this.value;
            const searchSubTerms = getSubTerms(searchTerm);
            function getHighlightTerms(msubterms){
                var ret = []
                for (var it of msubterms){
                    if (it.length > 0) {
                        for (var mut of mutateText(it)){
                            if (ret.indexOf(mut) == -1){
                                ret.push(mut);
                            }
                        }
                    }
                }
                return ret;
            }
            const searchHighlightTerms = getHighlightTerms(searchSubTerms);

            /*function highlightTerm(innerContent){
                var newContent = innerContent;
                for (var it of searchHighlightTerms){
                        newContent = newContent.replaceAll(it,  `<span class="highlight">${it}</span>`);
                }
                return newContent;
            }*/
            const results = doc.search(searchTerm, 5); // Limiting to 5 results for demonstration
            const detail_types = ["code", "comment"];

            // Display the search results
            const searchResults = document.getElementById('searchResults');
            searchResults.innerHTML = '';
            var searchResultItems = {};
            var searchResultItemIds = [];
            results.forEach(result => {
                const field = result.field; // "content"
                const ids = result.result;
                ids.forEach(id => {
                    const data_type = data[id].type;
                    const file_id = data[id].file_id;
                    if (searchResultItems[file_id] === undefined) {
                        searchResultItemIds.push(file_id);
                        const file_metadata = file_mapping[file_id];
                        const entry_id = file_metadata.entry_id;
                        const summary = data[entry_id + 1].content;
                        const filepath = file_metadata.filepath;
                        const language_id = file_metadata.language_id;
                        searchResultItems[file_id] = {"header": {"summary":summary, "filepath": filepath}, "pairs":{}, "language_id": language_id};
                    }
                    if (detail_types.indexOf(data_type) != -1){
                        const pair_id = ((data_type === "code")?id : (id-1));
                        if (searchResultItems[file_id].pairs[pair_id] === undefined){
                            searchResultItems[file_id].pairs[pair_id] = {"left":data[pair_id].content , "right":data[pair_id-1].content, "location":data[pair_id].location};
                        }
                    }

                    // listItem.textContent = `[${field}][${data_type}] ${data[id][field]}`;
                    // searchResults.appendChild(listItem);
                });
            });
            for (var file_id of searchResultItemIds) {
                const it = searchResultItems[file_id];
                const item = document.createElement('li');
                //const item = document.createElement('div');
                item.className = "searchItem"; 
                const search_header = document.createElement('div');
                search_header.className = "searchItemInfo";
                const location_p = document.createElement('p');
                location_p.className = "monospace-text";
                location_p.innerHTML = (it.header.filepath);
                search_header.appendChild(location_p);

                var skip_summary = false;

                if (Object.keys(it.pairs).length == 1){
                    if (it.pairs[Object.keys(it.pairs)[0]].right == it.header.summary){
                        skip_summary = true;
                    }
                }
                if (!skip_summary) {
                    const summary_p = document.createElement('p');
                    summary_p.innerHTML = (it.header.summary);
                    search_header.appendChild(summary_p);
                }
                search_header.setAttribute('onclick', `navigateToPage(${JSON.stringify(it.header.filepath)}, ${JSON.stringify(it.language_id)})`)


                item.appendChild(search_header);
                for (var pair_id in it.pairs){

                    const pair_container = document.createElement('div');
                    pair_container.className = "search-container";
                    const pair = it.pairs[pair_id];
                    const pair_item = document.createElement('div');
                    const pair_left = document.createElement('div');
                    pair_left.className = "left-half";
                    const code_location_p = document.createElement('p');
                    code_location_p.className = "monospace-text";
                    code_location_p.innerHTML = (pair.location);
                    pair_left.appendChild(code_location_p);
                    const comment_p = document.createElement('p');
                    comment_p.innerHTML = (pair.right);
                    pair_left.appendChild(comment_p);
                    
                    const pair_right = document.createElement('div');
                    pair_right.className = "right-half";
                    const code_pre = document.createElement('pre');
                    const code_code = document.createElement('code');
                    code_code.className = `language-${it.language_id}`
                    // Set the "data-dependencies" attribute
                    // code_code.setAttribute('data-dependencies', it.language_id+"!");
                    code_code.textContent = pair.left;
                    code_pre.appendChild(code_code);
                    //code_pre.className = "monospace-text";
                    //code_pre.innerHTML = highlightTerm(pair.left);
                    pair_right.appendChild(code_pre);

                    pair_container.append(pair_left);
                    pair_container.append(pair_right);
                    pair_container.setAttribute('onclick', `navigateToPage(${JSON.stringify(it.header.filepath)}, ${JSON.stringify(it.language_id)}, ${JSON.stringify(pair.location)})`)
                    item.appendChild(pair_container);
                }
                //li_elem = document.createElement('li');
                //li_elem.appendChild(item);
                //searchResults.appendChild(li_elem);

                searchResults.appendChild(item);
            }

            Prism.highlightAllUnder(searchResults);
            const markInstance = new Mark(document.getElementById('searchResults'));
            markInstance.unmark(); // Clear previous marks
            markInstance.mark(searchHighlightTerms);
        });
    }
    document.addEventListener('DOMContentLoaded', registerSearchEventListener);
</script>
{%endblock%}
{%block stylesheet%}
<style>
/* CSS for highlighted text */
    mark {
        background-color: yellow;
        color: black;
        font-weight: bold;
    }
</style>
<link href="https://cdn.jsdelivr.net/npm/prismjs@v1.x/themes/prism.css" rel="stylesheet" />
<style>
    .search-container{
        margin-bottom: 10px;
    }
    /* Styles for mobile devices */
    @media (max-width: 767px) {
        .repository-url{
            display:none;
        }
        .search-container {
            border: 2px solid #ccc;
        }

        .left-half,
        .right-half {
            padding: 10px;
        }
        #searchResults{
        font-size: 5px;}
    }

    /* Styles for desktop devices */
    @media (min-width: 768px) {

        #searchResults{
        font-size: 7px;}
        .search-container {
            display: flex;
            border: 2px solid #ccc;
        }

        .left-half,
        .right-half {
            flex: 1;
            padding: 10px;

        }
    }

    .left-half {
        background-color: #ccc;
    }

    .right-half {
        background-color: #f1f1f1;
    }
    .highlight {
        background-color: yellow !important;
        color: black !important;
    }

    .monospace-text {
        font-family: "Courier New", monospace;
        color: #333;
    }
    /* useless now */
    pre {
        overflow-x: auto;
        white-space: pre-wrap;
        white-space: -moz-pre-wrap;
        white-space: -pre-wrap;
        white-space: -o-pre-wrap;
        word-wrap: break-word;
    }

    .searchItemInfo:hover {
         cursor: pointer;
    }
    .search-container:hover {
         cursor: pointer;
    }
    .searchItem {
        padding: 10px;
        padding-bottom:0;
        padding-top:0;
        border: 2px solid #ccc;
    }

    .searchItemInfo {
        padding: 10px;
    }
</style>
<style type="text/css">
    html, body {
        font-family: 'Roboto', sans-serif;
        height: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
    }

    .container {
        display: flex;
        flex-direction: column;
        align-items: left;
        justify-content: center;
        text-align: left;
        margin: 5%;
        margin-bottom: 10px;
        margin-top: 1.5%;
    }

    input[type="text"] {
        padding: 10px;
        /*border-radius: 10px;*/
        border: 2px solid #ccc;
    }

    ul {
        flex: 1; /* Fill the remaining space */
        overflow-y: auto; /* Enable vertical scrolling */
        list-style: none;
        padding: 0;
        margin: 5%;
        margin-top:0;
    }

    ul li {
        background-color: #f2f2f2;
        margin-bottom: 10px;
        /*border-radius: 10px;*/
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
    }
</style>
{%endblock%}
{%block body%}

<body>
	<script src="https://cdn.jsdelivr.net/npm/prismjs@v1.x/components/prism-core.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js"></script>
    <header class="container">
        <h2><a href="{{repository_url}}" class="github-icon"><i class="fab fa-github"></i></a> Document Index<span class="repository-url"> of:
            {{partial_repository_url}} </span></h2>
        <input type="text" id="searchInput" placeholder="Search...">
    </header>
    <ul id="searchResults"></ul>
</body>
{%endblock%}