{% extends "search_template.html.j2" %}
{%block title%}
 <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-search' viewBox='0 0 16 16'%3E%3Cpath d='M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0'/%3E%3C/svg%3E" type="image/svg+xml">
<title>Search Code By Comment</title>
{%endblock%}
{%block searchscript%}
<script src="https://cdn.jsdelivr.net/npm/mark.js"></script>
{%endblock%}
{%block stylesheet%}
<style>
    /* CSS for highlighted text */
    mark {
        background-color: yellow;
        color: black;
        font-weight: bold;
    }
</style>
<link href="https://cdn.jsdelivr.net/npm/prismjs@v1.x/themes/prism.css" rel="stylesheet" />
<style>
        #progress-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        #progress-bar {
            height: 20px;
            background-color: #f2f2f2;
            border: 1px solid #ccc;
            overflow: hidden;
        }

        #progress-bar .progress {
            width: 0;
            height: 100%;
            background-color: #4caf50 !important;
        }
</style>
<style>
    input{
        background-color: transparent !important;
    }
    .search-container {
        margin-bottom: 10px;
    }

    p {
        line-height: 1.5;
    }

    h2 {
        overflow-x: auto;
    }

    /* Styles for mobile devices */
    @media (max-width: 767px) {
        #progress-bar {
        
            width: 60%;
        }

        /*(h2{
            font-size: 27px;
        }*/
        html,
        body {

            margin-left: 3%;
            margin-right: 3%;
        }

        .repository-url {
            display: none;
        }

        .search-container {
            border: 1px solid #ccc;
        }

        .right-half {
            /*padding-left: 10px;*/
            padding-right: 10px;
        }

        .left-half {
            padding-left: 15px;
            padding-right: 10px;

            padding-top: 5px;
            padding-bottom: 5px;
        }

        #searchResults,
        #searchInput {
            font-size: 14px;
        }

        #searchInput {
            text-indent: 15px;
        }

        .searchItemInfo {
           padding-left: 15px; 
        }
    }

    /* Styles for desktop devices */
    @media (min-width: 768px) {

        #progress-bar {
        
            width: 50%;
        }
        #searchInput {
            text-indent: 20px;
        }

        html,
        body {

            margin-left: 5%;
            margin-right: 5%;
        }

        #searchResults,
        #searchInput {
            font-size: 17px;
        }

        .searchItemInfo {
            padding-left: 20px;
        }

        .search-container {
            display: flex;
            border: 1px solid #ccc;
        }

        .left-half,
        .right-half {
            flex: 1;
            overflow-x: auto;
        }

        .right-half {

            padding-right: 20px;
        }

        .left-half {
            padding-top: 5px;
            padding-left: 20px;
            padding-right: 20px;
        }
    }

    .left-half {
        background-color: #ccc;

    }

    .right-half {
        background-color: #f1f1f1;
    }

    .highlight {
        background-color: yellow !important;
        color: black !important;
    }

    .monospace-text {
        font-family: "Courier New", monospace;
        color: #333;
    }

    /* useless now */
    pre {
        overflow-x: auto;
        white-space: pre-wrap;
        white-space: -moz-pre-wrap;
        white-space: -pre-wrap;
        white-space: -o-pre-wrap;
        word-wrap: break-word;
    }

    .codelink:hover {
        cursor: pointer;
    }

    /*
    .searchItemInfo:hover {
         cursor: pointer;
    }
    .search-container:hover {
         cursor: pointer;
    }
    */
    .searchItem {
        padding: 10px;
        padding-bottom: 0;
        padding-top: 0;
        border: 1px solid #ccc;
    }
/*
    .searchItemInfo {
        padding: 10px;
    }
*/
</style>
<style type="text/css">
    html,
    body {
        /*max-width: 900px;*/
        font-family: 'Roboto', sans-serif;
        height: 100%;
        /* margin: 0; */
        padding: 0;
        display: flex;
        flex-direction: column;
    }

    .container {
        display: flex;
        flex-direction: column;
        align-items: left;
        justify-content: center;
        text-align: left;
        /* margin: 5%; */
        margin-bottom: 10px;
        margin-top: 1.5%;
    }

    input[type="text"] {
        padding: 10px;
        /*border-radius: 10px;*/
        border: 1px solid #ccc;
    }

    ul {
        flex: 1;
        /* Fill the remaining space */
        overflow-y: auto;
        /* Enable vertical scrolling */
        list-style: none;
        padding: 0;
        /* margin: 5%; */
        margin-top: 0;
    }

    ul li {
        background-color: #f2f2f2;
        margin-bottom: 10px;
        /*border-radius: 10px;*/
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
    }
</style>
{%endblock%}
{%block body%}

<body>

    <div id="progress-overlay">
        <div id="progress-bar">
            <div class="progress"></div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@v1.x/components/prism-core.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@v1.x/plugins/autoloader/prism-autoloader.min.js"></script>
    <header class="container">
        <h2><a id="github-link" class="github-icon"><i class="fab fa-github"></i></a> Document Index<span class="repository-url"> of:
                <span id="partial-repository-url"></span></span></h2>
        <input type="text" id="searchInput" placeholder="Search...">
    </header>
    <ul id="searchResults"></ul>
    <script type="text/javascript" defer>
    const RESULT_LIMIT = 50;
    const progressOverlay = document.getElementById('progress-overlay');
    const progressBar = document.querySelector('.progress');
    function navigateToPage(base_filepath, language_id, project_id, detail_filepath = "") {
        // Use a relative path to navigate to a specific page
        let page_param = "codeview.html";
        let file_param = 'src' + base_filepath;
        file_param = encodeURIComponent(file_param);
        let language_param = language_id
        let jump_link = `${page_param}?file=${file_param}&language=${language_id}&project=${project_id}`;
        if (detail_filepath !== "") {
            let location_range = detail_filepath.slice(base_filepath.length + 1);
            let location_param = `mycode.${location_range}`;
            jump_link = `${jump_link}#${location_param}`;
        }
        window.location.href = jump_link;
    }
    async function waitForDOMContentLoaded() {
  return new Promise(resolve => {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', resolve);
    } else {
      resolve();
    }
  });
}
    // Sample data for demonstration
    async function async_main() {

        const metadata_req = await fetch("metadata.json")// load from server
        const metadata = JSON.parse(await metadata_req.text())
        const github_url = metadata.url.full;
        const project_id = metadata.project_name;
        const github_partial_url = metadata.url.partial;
        const file_mapping = metadata.file_mapping
        const split_count = metadata.split_count

        var data_var = {}
        for (let i = 0; i < split_count; i++) {
            let data_req = await fetch(`data/${i}.json`)// load from server
            let data_part = JSON.parse(await data_req.text())
            data_var = { ...data_part, ...data_var }
            const progressPercentage = (i+1 / split_count) * 100;
            progressBar.style.width = `${progressPercentage}%`;
        }
            progressOverlay.style.display = 'none';


        const data = data_var // obviously not constant.
        // debugger

        // Create a new FlexSearch instance with the required configuration
        const doc = new FlexSearch.Document({
            tokenize: "full",
            document: {
                id: "id",
                index: ["content"]
            }
        });

        // Add the data to the search index
        Object.keys(data).forEach(id => {
            doc.add(id, data[id]);
        });
        const englishSymbols = ["!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~"];

        function getSubTerms(it) {
            var m_str = it
            for (const sym of englishSymbols) {
                m_str = m_str.replaceAll(sym, " ");
            }
            return m_str.split(" ");
        }
        function searchInputEventListener() {

            function capitalizeFirstLetter(text) {
                return text.charAt(0).toUpperCase() + text.slice(1);
            }
            function mutateText(text) {
                var lowerText = text.toLowerCase()
                var upperText = text.toUpperCase()
                var lowerCapitalized = capitalizeFirstLetter(lowerText)
                return [text, lowerText, upperText, lowerCapitalized]
            }

            const searchTerm = this.value;
            const searchSubTerms = getSubTerms(searchTerm);
            function getHighlightTerms(msubterms) {
                var ret = []
                for (var it of msubterms) {
                    if (it.length > 0) {
                        for (var mut of mutateText(it)) {
                            if (ret.indexOf(mut) == -1) {
                                ret.push(mut);
                            }
                        }
                    }
                }
                return ret;
            }
            const searchHighlightTerms = getHighlightTerms(searchSubTerms);

            /*function highlightTerm(innerContent){
                var newContent = innerContent;
                for (var it of searchHighlightTerms){
                        newContent = newContent.replaceAll(it,  `<span class="highlight">${it}</span>`);
                }
                return newContent;
            }*/
            const results = doc.search(searchTerm, RESULT_LIMIT); // Limiting to 5 results for demonstration
            const detail_types = ["code", "comment"];

            // Display the search results
            const searchResults = document.getElementById('searchResults');
            searchResults.innerHTML = '';
            var searchResultItems = {};
            var searchResultItemIds = [];
            results.forEach(result => {
                const field = result.field; // "content"
                const ids = result.result;
                ids.forEach(id => {
                    const data_type = data[id].type;
                    const file_id = data[id].file_id;
                    if (searchResultItems[file_id] === undefined) {
                        searchResultItemIds.push(file_id);
                        const file_metadata = file_mapping[file_id];
                        const entry_id = file_metadata.entry_id;
                        const summary = data[entry_id + 1].content;
                        const filepath = file_metadata.filepath;
                        const language_id = file_metadata.language_id;
                        searchResultItems[file_id] = { "header": { "summary": summary, "filepath": filepath }, "pairs": {}, "language_id": language_id };
                    }
                    if (detail_types.indexOf(data_type) != -1) {
                        const pair_id = ((data_type === "code") ? id : (id - 1));
                        if (searchResultItems[file_id].pairs[pair_id] === undefined) {
                            searchResultItems[file_id].pairs[pair_id] = { "left": data[pair_id].content, "right": data[pair_id - 1].content, "location": data[pair_id].location };
                        }
                    }
                    // listItem.textContent = `[${field}][${data_type}] ${data[id][field]}`;
                    // searchResults.appendChild(listItem);
                });
            });
            for (var file_id of searchResultItemIds) {
                const it = searchResultItems[file_id];
                const item = document.createElement('li');
                //const item = document.createElement('div');
                item.className = "searchItem";
                const search_header = document.createElement('div');
                search_header.className = "searchItemInfo";
                const location_p = document.createElement('p');
                location_p.className = "monospace-text codelink";
                location_p.innerHTML = (it.header.filepath.slice(1));

                location_p.setAttribute('onclick', `navigateToPage(${JSON.stringify(it.header.filepath)}, ${JSON.stringify(it.language_id)}, ${JSON.stringify(project_id)})`)
                search_header.appendChild(location_p);

                var skip_summary = false;

                if (Object.keys(it.pairs).length == 1) {
                    if (it.pairs[Object.keys(it.pairs)[0]].right == it.header.summary) {
                        skip_summary = true;
                    }
                }
                if (!skip_summary) {
                    const summary_p = document.createElement('p');
                    summary_p.innerHTML = (it.header.summary);
                    search_header.appendChild(summary_p);
                }
                //search_header.setAttribute('onclick', `navigateToPage(${JSON.stringify(it.header.filepath)}, ${JSON.stringify(it.language_id)})`)


                item.appendChild(search_header);
                for (var pair_id in it.pairs) {

                    const pair_container = document.createElement('div');
                    pair_container.className = "search-container";
                    const pair = it.pairs[pair_id];
                    const pair_item = document.createElement('div');
                    const pair_left = document.createElement('div');
                    pair_left.className = "left-half";
                    const code_location_p = document.createElement('p');
                    code_location_p.className = "monospace-text codelink";
                    code_location_p.innerHTML = (pair.location.slice(1));
                    code_location_p.setAttribute('onclick', `navigateToPage(${JSON.stringify(it.header.filepath)}, ${JSON.stringify(it.language_id)},  ${JSON.stringify(project_id)}, ${JSON.stringify(pair.location)})`)

                    pair_left.appendChild(code_location_p);
                    const comment_p = document.createElement('p');
                    comment_p.innerHTML = (pair.right);
                    pair_left.appendChild(comment_p);

                    const pair_right = document.createElement('div');
                    pair_right.className = "right-half";
                    const code_pre = document.createElement('pre');
                    const code_code = document.createElement('code');
                    code_code.className = `language-${it.language_id}`
                    // Set the "data-dependencies" attribute
                    // code_code.setAttribute('data-dependencies', it.language_id+"!");
                    code_code.textContent = pair.left;
                    code_pre.appendChild(code_code);
                    //code_pre.className = "monospace-text";
                    //code_pre.innerHTML = highlightTerm(pair.left);
                    pair_right.appendChild(code_pre);

                    pair_container.append(pair_right);
                    pair_container.append(pair_left);
                    //pair_container.setAttribute('onclick', `navigateToPage(${JSON.stringify(it.header.filepath)}, ${JSON.stringify(it.language_id)}, ${JSON.stringify(pair.location)})`)
                    item.appendChild(pair_container);
                }
                //li_elem = document.createElement('li');
                //li_elem.appendChild(item);
                //searchResults.appendChild(li_elem);

                searchResults.appendChild(item);
            }

            Prism.highlightAllUnder(searchResults);
            // let's try understand that.
            const markInstance = new Mark(document.getElementById('searchResults'));
            markInstance.unmark(); // Clear previous marks
            markInstance.mark(searchHighlightTerms);
        }


        // Event listener for the search input
        function registerSearchEventListener() {
            // this is never called
            document.getElementById("partial-repository-url").innerText = github_partial_url;
            document.getElementById("github-link").setAttribute("href", github_url);
            // get query parameters.
            const searchInputElem = document.getElementById('searchInput');
            searchInputElem.addEventListener('input',
                searchInputEventListener
            );

            function setTextAndTriggerInputEvent(queryString) {
                searchInputElem.value = queryString; // Set text into the input box
                searchInputElem.dispatchEvent(new Event('input')); // Fire an input event
            }
            function displayFile(file_path) {
                // TODO: handle file query string
            }

            const queryParams = new URLSearchParams(window.location.search);
            const query_from_url = queryParams.get('q');
            const file_path_from_url = queryParams.get('file');
            if (query_from_url != null) {
                setTextAndTriggerInputEvent(query_from_url)
            } else if (file_path_from_url != null) {
                displayFile(file_path_from_url)
            }
        }

        //document.addEventListener('DOMContentLoaded', registerSearchEventListener);
        // waitForDOMContentLoaded();
        registerSearchEventListener()
        // console.log("event listener registered")
    }
    async_main()
</script>
</body>
{%endblock%}